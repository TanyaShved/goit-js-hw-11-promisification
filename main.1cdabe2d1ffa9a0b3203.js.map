{"version":3,"sources":["webpack:///./js/task-3.js","webpack:///./index.js","webpack:///./js/task-1.js","webpack:///./js/task-2.js"],"names":["makeTransaction","transaction","Promise","resolve","reject","delay","min","max","Math","floor","random","setTimeout","id","logSuccess","time","console","log","logError","warn","amount","then","catch","ms","logger","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table"],"mappings":"4EAAA,MAIMA,EAAmBC,GACd,IAAIC,QAAQ,CAACC,EAASC,KACzB,MAAMC,GANqBC,EAMa,IANRC,EAMa,IAL5CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EAQhCI,WAAW,KACYH,KAAKE,SAAW,GAG/BP,EAAQF,EAAYW,GAAIP,GAExBD,EAAOH,EAAYW,KAExBP,KAILQ,EAAa,CAACD,EAAIE,KACtBC,QAAQC,IAAK,eAAcJ,kBAAmBE,QAG1CG,EAAWL,IACfG,QAAQG,KAAM,gCAA+BN,+BAG/CZ,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,KAC/BC,KAAKP,GACLQ,MAAMJ,GAETjB,EAAgB,CAAEY,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,I,yDC1CT,gD,mBCAA,MAAMZ,EAAQiB,GACH,IAAIpB,QAAQ,CAACC,EAASC,KACzBO,WAAW,KACPR,EAAQmB,GACRlB,EAAQ,aAKdmB,EAAST,GAAQC,QAAQC,IAAK,kBAAiBF,OAGrDT,EAAM,KAAMe,KAAKG,GACjBlB,EAAM,KAAMe,KAAKG,GACjBlB,EAAM,MAAMe,KAAKG,I,mBCdjB,MAAMC,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IACxB,IAAI3B,QAAQ,CAACC,EAASC,KAIzBD,EAHqByB,EAASE,IAAIC,GAC9BA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,IAGjE3B,EAAQ,WAIVmB,EAASS,GAAgBjB,QAAQkB,MAAMD,GAE7CL,EAAgBH,EAAO,SAASJ,KAAKG,GACrCI,EAAgBH,EAAO,OAAOJ,KAAKG,K","file":"main.1cdabe2d1ffa9a0b3203.js","sourcesContent":["const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    return new Promise((resolve, reject) => {\n        const delay = randomIntegerFromInterval(200, 500);\n\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolve(transaction.id, delay);\n            } else {\n                reject(transaction.id);\n            }\n        }, delay);\n    });\n};\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);","import './styles.css';\nimport './js/task-1';\nimport './js/task-2';\nimport './js/task-3';\n","const delay = ms => {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(ms);\n            reject(`error`)\n        })\n    })\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n    return new Promise((resolve, reject) => {\n        const updatedUsers = allUsers.map(user =>\n            user.name === userName ? { ...user, active: !user.active } : user,\n        );\n        resolve(updatedUsers);\n        reject(`error`)\n    });  \n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);"],"sourceRoot":""}